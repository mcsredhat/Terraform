### **Key Terraform Components**
1. **Providers**  
   - Providers are plugins that Terraform uses to manage resources (e.g., AWS, Azure, Google Cloud).  
   - They allow Terraform to interact with cloud platforms and other services.  
## **1. Providers Examples**

### **Basic Example**: AWS Provider Configuration  

hcl
# Configure the AWS provider
provider "aws" {
  region = "us-east-1" # Specify the AWS region
}


### **Intermediate Example**: Configure Provider with Shared Credentials  

hcl
# Configure AWS provider with shared credentials
provider "aws" {
  region                  = "us-west-2" # AWS region
  shared_credentials_file = "~/.aws/credentials" # Path to AWS credentials file
  profile                 = "default" # Use the 'default' profile
}


### **Advanced Example**: Multiple Provider Configurations  

hcl
# Configure the primary AWS provider for 'us-east-1' region
provider "aws" {
  alias  = "east"      # Alias for this provider
  region = "us-east-1" # Specify the AWS region
}

# Configure the secondary AWS provider for 'us-west-2' region
provider "aws" {
  alias  = "west"      # Alias for this provider
  region = "us-west-2" # Another AWS region
}

# Create resources using both providers
resource "aws_s3_bucket" "bucket_east" {
  provider = aws.east # Use the east provider
  bucket   = "my-bucket-east"
}

resource "aws_s3_bucket" "bucket_west" {
  provider = aws.west # Use the west provider
  bucket   = "my-bucket-west"
}
-------------------------------------------------
2. **Resources**  
   - Resources define what infrastructure Terraform will create or manage.  
   - Examples include VPCs, EC2 instances, S3 buckets, and databases.


## **2. Resources Examples**

### **Basic Example**: Create an S3 Bucket  

hcl
# Create a basic S3 bucket resource
resource "aws_s3_bucket" "example_bucket" {
  bucket = "my-basic-s3-bucket" # Name of the bucket
}


### **Intermediate Example**: Create an EC2 Instance with Tags  

hcl
# Create an EC2 instance resource
resource "aws_instance" "example_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI ID
  instance_type = "t2.micro"             # EC2 instance type

  tags = {
    Name = "MyIntermediateEC2" # Tag the instance with a name
  }
}


### **Advanced Example**: Create an EC2 with Security Group and Key Pair  

hcl
# Create a security group for EC2
resource "aws_security_group" "example_sg" {
  name        = "example-sg"
  description = "Allow SSH and HTTP inbound traffic"

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allow SSH from all IPs
  }

  ingress {
    description = "Allow HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allow HTTP from all IPs
  }

  egress {
    description = "Allow all outbound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"] # Allow all outbound traffic
  }
}

# Create an EC2 instance with the security group
resource "aws_instance" "example_ec2" {
  ami           = "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI ID
  instance_type = "t2.micro"             # Instance type
  key_name      = "my-key-pair"          # Key pair for SSH access

  security_groups = [aws_security_group.example_sg.name] # Attach security group

  tags = {
    Name = "AdvancedEC2Instance" # Add name tag
  }
}

----------------------------------------------------
3. **Variables**  
   - Variables allow users to parameterize Terraform configurations.  
   - They make code flexible, reusable, and easy to manage.

## **3. Variables Examples**

### **Basic Example**: Use a Variable for the Region  

hcl
# Define a variable for the AWS region
variable "aws_region" {
  default = "us-east-1" # Default value
}

# Configure AWS provider with the variable
provider "aws" {
  region = var.aws_region # Use the variable
}


### **Intermediate Example**: Use Variables for EC2 Configuration  

hcl
# Define variables for EC2 instance
variable "instance_type" {
  default = "t2.micro"
}

variable "ami_id" {
  description = "AMI ID for the instance"
}

# Use variables in resource
resource "aws_instance" "example" {
  ami           = var.ami_id        # Use AMI ID variable
  instance_type = var.instance_type # Use instance type variable
}


### **Advanced Example**: Variable Validation and Sensitive Values  

hcl
# Define a sensitive variable for the key pair name
variable "key_name" {
  description = "Key pair name for SSH access"
  sensitive   = true # Mark the variable as sensitive
}

# Define a variable with validation
variable "instance_count" {
  type        = number
  description = "Number of EC2 instances"

  validation {
    condition     = var.instance_count > 0
    error_message = "Instance count must be greater than 0."
  }
}

# Use variables in resource
resource "aws_instance" "example" {
  count         = var.instance_count
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  key_name      = var.key_name # Use sensitive variable
}

-------------------------------------------------
4. **Outputs**  
   - Outputs allow users to retrieve and display values from Terraform-managed resources.  
   - They are useful for debugging, integration with other tools, or showing resource attributes.

## **4. Outputs Examples**

### **Basic Example**: Display S3 Bucket Name  

hcl
output "bucket_name" {
  value = aws_s3_bucket.example_bucket.bucket # Output the bucket name
}


### **Intermediate Example**: Output EC2 Public IP  

hcl
output "ec2_public_ip" {
  value = aws_instance.example_instance.public_ip # Output EC2 public IP
}


### **Advanced Example**: Format Outputs  

hcl
output "ec2_details" {
  value = "Instance ID: ${aws_instance.example.id}, Public IP: ${aws_instance.example.public_ip}"
}
-------------------------------------------------
5. **Modules**  
   - Modules are reusable groups of resources.  
   - They enable encapsulation, modularity, and cleaner configurations.

## **5. Modules Examples**

### **Basic Example**: Use a Simple Module  

hcl
module "s3_module" {
  source = "./modules/s3" # Path to module
}


### **Intermediate Example**: Pass Variables to Module  

hcl
module "ec2_module" {
  source        = "./modules/ec2" # Path to EC2 module
  instance_type = "t2.micro"      # Pass instance type as variable
}


### **Advanced Example**: Use Remote Modules  

hcl
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws" # Use remote module from registry
  version = "3.14.0"

  name = "advanced-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  public_subnets  = ["10.0.1.0/24", "10.0.2.0/24"]
  private_subnets = ["10.0.3.0/24", "10.0.4.0/24"]
}

=================================================
Here is a rewritten version of the Terraform examples incorporating **variables**, **outputs**, **loops**, **arrays/lists**, **conditions**, and detailed comments for clarity.

### **1. Providers Examples**

#### **Basic Example**: AWS Provider Configuration
```hcl
# Define a variable for the AWS region
variable "aws_region" {
  description = "AWS region for the provider"
  default     = "us-east-1" # Default region
}

# Configure the AWS provider using the variable
provider "aws" {
  region = var.aws_region # Use the region from the variable
}
```

#### **Intermediate Example**: Configure Provider with Shared Credentials
```hcl
# Define variables for credentials and profile
variable "aws_credentials_file" {
  description = "Path to the AWS credentials file"
  default     = "~/.aws/credentials"
}

variable "aws_profile" {
  description = "AWS profile to use"
  default     = "default"
}

# Configure AWS provider with shared credentials
provider "aws" {
  region                  = var.aws_region                # Use the region from variable
  shared_credentials_file = var.aws_credentials_file      # Use the credentials file path from variable
  profile                 = var.aws_profile               # Use the profile name from variable
}
```

#### **Advanced Example**: Multiple Provider Configurations
```hcl
# Define variables for regions
variable "primary_region" {
  description = "Primary AWS region"
  default     = "us-east-1"
}

variable "secondary_region" {
  description = "Secondary AWS region"
  default     = "us-west-2"
}

# Configure primary provider
provider "aws" {
  alias  = "primary"                  # Alias for the primary provider
  region = var.primary_region         # Use the primary region from variable
}

# Configure secondary provider
provider "aws" {
  alias  = "secondary"                # Alias for the secondary provider
  region = var.secondary_region       # Use the secondary region from variable
}

# Create S3 buckets using both providers
resource "aws_s3_bucket" "primary_bucket" {
  provider = aws.primary              # Use the primary provider
  bucket   = "primary-region-bucket"
}

resource "aws_s3_bucket" "secondary_bucket" {
  provider = aws.secondary            # Use the secondary provider
  bucket   = "secondary-region-bucket"
}
```

---

### **2. Resources Examples**

#### **Basic Example**: Create an S3 Bucket
```hcl
# Define variable for bucket name
variable "bucket_name" {
  description = "Name of the S3 bucket"
  default     = "my-basic-s3-bucket"
}

# Create an S3 bucket
resource "aws_s3_bucket" "example_bucket" {
  bucket = var.bucket_name # Use the bucket name from the variable
}
```

#### **Intermediate Example**: Create an EC2 Instance with Tags
```hcl
# Define variables for instance configuration
variable "ami_id" {
  description = "AMI ID for the EC2 instance"
  default     = "ami-0c55b159cbfafe1f0"
}

variable "instance_type" {
  description = "EC2 instance type"
  default     = "t2.micro"
}

variable "instance_tags" {
  description = "Tags for the EC2 instance"
  type        = map(string)
  default     = { Name = "IntermediateEC2" }
}

# Create an EC2 instance
resource "aws_instance" "example_instance" {
  ami           = var.ami_id        # Use the AMI ID from the variable
  instance_type = var.instance_type # Use the instance type from the variable
  tags          = var.instance_tags # Use the tags from the variable
}
```

#### **Advanced Example**: Create an EC2 with Security Group and Key Pair
```hcl
# Define variables for EC2 configuration
variable "key_pair_name" {
  description = "Name of the key pair for SSH access"
  default     = "my-key-pair"
}

variable "security_group_name" {
  description = "Name of the security group"
  default     = "example-sg"
}

# Create a security group
resource "aws_security_group" "example_sg" {
  name        = var.security_group_name         # Use the security group name from the variable
  description = "Allow SSH and HTTP inbound traffic"

  ingress {
    description = "Allow SSH"
    from_port   = 22                            # SSH port
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]                 # Allow access from all IPs (not recommended for production)
  }

  ingress {
    description = "Allow HTTP"
    from_port   = 80                            # HTTP port
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]                 # Allow access from all IPs
  }

  egress {
    description = "Allow all outbound traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]                 # Allow all outbound traffic
  }
}

# Create an EC2 instance with the security group
resource "aws_instance" "example_ec2" {
  ami               = var.ami_id             # Use the AMI ID from the variable
  instance_type     = var.instance_type      # Use the instance type from the variable
  key_name          = var.key_pair_name      # Use the key pair from the variable
  security_groups   = [aws_security_group.example_sg.name] # Attach the security group

  tags = {
    Name = "AdvancedEC2Instance"
  }
}
```

---

### **3. Variables Examples**

#### **Basic Example**: Use a Variable for the Region
```hcl
# Define a variable for the AWS region
variable "aws_region" {
  description = "AWS region for the provider"
  default     = "us-east-1"
}

# Configure AWS provider with the variable
provider "aws" {
  region = var.aws_region # Use the region from the variable
}
```

#### **Intermediate Example**: Use Variables for EC2 Configuration
```hcl
# Define variables for EC2 configuration
variable "ami_id" {
  description = "AMI ID for the instance"
  default     = "ami-0c55b159cbfafe1f0"
}

variable "instance_type" {
  description = "EC2 instance type"
  default     = "t2.micro"
}

# Use variables in resource
resource "aws_instance" "example" {
  ami           = var.ami_id        # Use AMI ID variable
  instance_type = var.instance_type # Use instance type variable
}
```

#### **Advanced Example**: Variable Validation and Sensitive Values
```hcl
# Define a sensitive variable for the key pair name
variable "key_name" {
  description = "Key pair name for SSH access"
  sensitive   = true # Mark the variable as sensitive
}

# Define a variable with validation
variable "instance_count" {
  type        = number
  description = "Number of EC2 instances"

  validation {
    condition     = var.instance_count > 0 # Ensure instance count is greater than 0
    error_message = "Instance count must be greater than 0."
  }
}

# Use variables in resource
resource "aws_instance" "example" {
  count         = var.instance_count
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  key_name      = var.key_name # Use sensitive variable
}
```

---

### **4. Outputs Examples**

#### **Basic Example**: Display S3 Bucket Name
```hcl
output "bucket_name" {
  description = "The name of the S3 bucket"
  value       = aws_s3_bucket.example_bucket.bucket
}
```

#### **Intermediate Example**: Output EC2 Public IP
```hcl
output "ec2_public_ip" {
  description = "The public IP of the EC2 instance"
  value       = aws_instance.example_instance.public_ip
}
```

#### **Advanced Example**: Format Outputs
```hcl
output "ec2_details" {
  description = "Formatted details of the EC2 instance"
  value       = "Instance ID: ${aws_instance.example.id}, Public IP: ${aws_instance.example.public_ip}"
}

