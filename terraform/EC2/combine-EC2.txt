# Example 1: Single EC2 Instance with Advanced Features
provider "aws" {
  region = "us-west-2"
}

# Variables
variable "ami_id" {
  description = "The AMI ID for the EC2 instance"
  default     = "ami-0c02fb55956c7d316"
}

variable "instance_type" {
  description = "The instance type for the EC2 instance"
  default     = "t2.micro"
}

variable "key_pair_name" {
  description = "SSH Key pair name"
  default     = "example-key"
}

variable "ebs_volume_size" {
  description = "Size of the EBS volume in GB"
  default     = 10
}

# Key Pair
resource "aws_key_pair" "example_key" {
  key_name   = var.key_pair_name
  public_key = file("~/.ssh/id_rsa.pub")
}

# Security Group
resource "aws_security_group" "example_sg" {
  name        = "example-security-group"
  description = "Allow SSH and HTTP traffic"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# IAM Role and Instance Profile
resource "aws_iam_role" "example_role" {
  name = "example-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action    = "sts:AssumeRole",
        Effect    = "Allow",
        Principal = { Service = "ec2.amazonaws.com" }
      }
    ]
  })
}

resource "aws_iam_instance_profile" "example_instance_profile" {
  name = "example-instance-profile"
  role = aws_iam_role.example_role.name
}

# EBS Volume
resource "aws_ebs_volume" "example_volume" {
  availability_zone = "us-west-2a"
  size              = var.ebs_volume_size
  tags = {
    Name = "Example-EBS-Volume"
  }
}

# EC2 Instance
resource "aws_instance" "single_instance" {
  ami                  = var.ami_id
  instance_type        = var.instance_type
  key_name             = aws_key_pair.example_key.key_name
  security_group_names = [aws_security_group.example_sg.name]
  iam_instance_profile = aws_iam_instance_profile.example_instance_profile.name
  tags = {
    Name = "Single-Instance"
  }
}

resource "aws_volume_attachment" "example_attachment" {
  device_name = "/dev/xvdf"
  volume_id   = aws_ebs_volume.example_volume.id
  instance_id = aws_instance.single_instance.id
}

output "instance_public_ip" {
  value       = aws_instance.single_instance.public_ip
  description = "The public IP of the single EC2 instance"
}

# Example 2: Multiple EC2 Instances with Auto-Scaling and Load Balancing

# Variables
variable "subnet_ids" {
  description = "List of VPC subnet IDs"
  type        = list(string)
  default     = ["subnet-12345abc", "subnet-67890def"]
}

variable "desired_capacity" {
  description = "Desired number of instances in ASG"
  default     = 2
}

variable "max_size" {
  description = "Maximum number of instances in ASG"
  default     = 3
}

variable "min_size" {
  description = "Minimum number of instances in ASG"
  default     = 1
}

# Auto-Scaling Group
resource "aws_launch_configuration" "example_lc" {
  name          = "example-launch-config"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.example_key.key_name

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "example_asg" {
  launch_configuration = aws_launch_configuration.example_lc.name
  min_size             = var.min_size
  max_size             = var.max_size
  desired_capacity     = var.desired_capacity
  vpc_zone_identifier  = var.subnet_ids

  tag {
    key                 = "Name"
    value               = "ASG-Instance"
    propagate_at_launch = true
  }
}

# Elastic Load Balancer
resource "aws_elb" "example_elb" {
  name               = "example-elb"
  availability_zones = ["us-west-2a", "us-west-2b"]

  listener {
    instance_port     = 80
    instance_protocol = "HTTP"
    lb_port           = 80
    lb_protocol       = "HTTP"
  }

  health_check {
    target              = "HTTP:80/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  instances = aws_autoscaling_group.example_asg.instances
}

output "elb_dns_name" {
  value       = aws_elb.example_elb.dns_name
  description = "The DNS name of the Elastic Load Balancer"
}


-------------------------------------------
# Combined Example: EC2 with Advanced Features
provider "aws" {
  region = var.aws_region
}

# Variables
variable "aws_region" {
  description = "AWS region to deploy resources"
  default     = "us-west-2"
}

variable "ami_id" {
  description = "The AMI ID for the EC2 instances"
  default     = "ami-0c02fb55956c7d316"
}

variable "instance_type" {
  description = "The instance type for EC2 instances"
  default     = "t2.micro"
}

variable "key_pair_name" {
  description = "Name of the SSH key pair"
  default     = "example-key"
}

variable "ebs_volume_size" {
  description = "Size of the EBS volume in GB"
  default     = 10
}

variable "subnet_ids" {
  description = "List of VPC subnet IDs"
  type        = list(string)
  default     = ["subnet-12345abc", "subnet-67890def"]
}

variable "desired_capacity" {
  description = "Desired number of instances in Auto Scaling Group"
  default     = 2
}

variable "max_size" {
  description = "Maximum number of instances in Auto Scaling Group"
  default     = 3
}

variable "min_size" {
  description = "Minimum number of instances in Auto Scaling Group"
  default     = 1
}

# Key Pair
resource "aws_key_pair" "example_key" {
  key_name   = var.key_pair_name
  public_key = file("~/.ssh/id_rsa.pub")
}

# Security Group
resource "aws_security_group" "example_sg" {
  name        = "example-security-group"
  description = "Allow SSH and HTTP traffic"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# IAM Role and Instance Profile
resource "aws_iam_role" "example_role" {
  name = "example-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action    = "sts:AssumeRole",
        Effect    = "Allow",
        Principal = { Service = "ec2.amazonaws.com" }
      }
    ]
  })
}

resource "aws_iam_instance_profile" "example_instance_profile" {
  name = "example-instance-profile"
  role = aws_iam_role.example_role.name
}

# EBS Volume
resource "aws_ebs_volume" "example_volume" {
  availability_zone = "${var.aws_region}a"
  size              = var.ebs_volume_size
  tags = {
    Name = "Example-EBS-Volume"
  }
}

# Launch Configuration
resource "aws_launch_configuration" "example_lc" {
  name          = "example-launch-config"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.example_key.key_name
  security_groups = [aws_security_group.example_sg.id]

  lifecycle {
    create_before_destroy = true
  }
}

# Auto-Scaling Group
resource "aws_autoscaling_group" "example_asg" {
  launch_configuration = aws_launch_configuration.example_lc.name
  min_size             = var.min_size
  max_size             = var.max_size
  desired_capacity     = var.desired_capacity
  vpc_zone_identifier  = var.subnet_ids

  tag {
    key                 = "Name"
    value               = "ASG-Instance"
    propagate_at_launch = true
  }
}

# Elastic Load Balancer
resource "aws_elb" "example_elb" {
  name               = "example-elb"
  availability_zones = ["${var.aws_region}a", "${var.aws_region}b"]

  listener {
    instance_port     = 80
    instance_protocol = "HTTP"
    lb_port           = 80
    lb_protocol       = "HTTP"
  }

  health_check {
    target              = "HTTP:80/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  instances = aws_autoscaling_group.example_asg.instances
}

# Single Instance with EBS Volume
resource "aws_instance" "single_instance" {
  ami                  = var.ami_id
  instance_type        = var.instance_type
  key_name             = aws_key_pair.example_key.key_name
  security_group_names = [aws_security_group.example_sg.name]
  iam_instance_profile = aws_iam_instance_profile.example_instance_profile.name
  tags = {
    Name = "Single-Instance"
  }
}

resource "aws_volume_attachment" "example_attachment" {
  device_name = "/dev/xvdf"
  volume_id   = aws_ebs_volume.example_volume.id
  instance_id = aws_instance.single_instance.id
}

# Outputs
output "single_instance_public_ip" {
  value       = aws_instance.single_instance.public_ip
  description = "The public IP of the single EC2 instance"
}

output "elb_dns_name" {
  value       = aws_elb.example_elb.dns_name
  description = "The DNS name of the Elastic Load Balancer"
}
