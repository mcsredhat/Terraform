I'll create three comprehensive examples that incorporate the key functionality from the provided examples.



```hcl
# Example 1: Complete IAM User Setup with MFA and Access Keys
variable "user_name" {
  description = "Name of the IAM user"
  type        = string
  default     = "complete-user"
}

variable "enable_mfa" {
  description = "Enable MFA for user"
  type        = bool
  default     = true
}

provider "aws" {
  region = "us-west-2"
}

resource "aws_iam_user" "complete_user" {
  name = var.user_name
}

resource "aws_iam_access_key" "user_key" {
  user = aws_iam_user.complete_user.name
}

resource "aws_iam_virtual_mfa_device" "user_mfa" {
  count                   = var.enable_mfa ? 1 : 0
  virtual_mfa_device_name = "${var.user_name}-mfa"
}

resource "aws_iam_user_policy" "user_policy" {
  name = "${var.user_name}-policy"
  user = aws_iam_user.complete_user.name
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = ["s3:ListBucket", "s3:GetObject"]
        Effect   = "Allow"
        Resource = ["arn:aws:s3:::example-bucket", "arn:aws:s3:::example-bucket/*"]
      }
    ]
  })
}

# Example 2: Advanced Role with Multiple Policy Attachments
variable "role_name" {
  description = "Name of the IAM role"
  type        = string
  default     = "advanced-role"
}

variable "managed_policy_arns" {
  description = "List of managed policy ARNs"
  type        = list(string)
  default     = [
    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
  ]
}

resource "aws_iam_role" "advanced_role" {
  name = var.role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = ["ec2.amazonaws.com", "lambda.amazonaws.com"]
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "managed_policy_attachments" {
  for_each   = toset(var.managed_policy_arns)
  role       = aws_iam_role.advanced_role.name
  policy_arn = each.value
}

resource "aws_iam_role_policy" "custom_policy" {
  name = "${var.role_name}-custom-policy"
  role = aws_iam_role.advanced_role.name
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = ["dynamodb:GetItem", "dynamodb:PutItem"]
        Effect   = "Allow"
        Resource = "arn:aws:dynamodb:*:*:table/example-table"
      }
    ]
  })
}

# Example 3: Group Management with Conditional Memberships
variable "group_name" {
  description = "Name of the IAM group"
  type        = string
  default     = "admin-group"
}

variable "group_users" {
  description = "Map of users and their roles"
  type        = map(string)
  default     = {
    "admin1" = "administrator"
    "admin2" = "developer"
  }
}

resource "aws_iam_group" "admin_group" {
  name = var.group_name
}

resource "aws_iam_user" "group_users" {
  for_each = var.group_users
  name     = each.key
}

resource "aws_iam_group_membership" "group_membership" {
  name  = "${var.group_name}-membership"
  group = aws_iam_group.admin_group.name
  users = [for user in aws_iam_user.group_users : user.name]
}

resource "aws_iam_group_policy" "group_policy" {
  name  = "${var.group_name}-policy"
  group = aws_iam_group.admin_group.name
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action   = ["ec2:Describe*", "s3:List*"]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

# Outputs
output "user_arn" {
  value = aws_iam_user.complete_user.arn
}

output "role_arn" {
  value = aws_iam_role.advanced_role.arn
}

output "group_users" {
  value = [for user in aws_iam_user.group_users : user.name]
}

