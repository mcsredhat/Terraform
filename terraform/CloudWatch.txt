# **2. CloudWatch**

## **Basic**: Create a CloudWatch Alarm for EC2 CPU Usage

hcl
# Define the AWS provider
provider "aws" {
  region = "us-east-1"  # AWS region to deploy resources
}

# Create an EC2 instance for monitoring
resource "aws_instance" "example_instance" {
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with a valid AMI ID
  instance_type = "t2.micro"              # Instance type
  tags = {
    Name = "ExampleInstance"             # Tag for the instance
  }
}

# CloudWatch Alarm for CPU utilization
resource "aws_cloudwatch_metric_alarm" "cpu_alarm" {
  alarm_name          = "high-cpu-usage-alarm"           # Name of the alarm
  comparison_operator = "GreaterThanThreshold"          # Trigger if greater than threshold
  evaluation_periods  = 2                               # Number of periods to evaluate
  metric_name         = "CPUUtilization"                # CloudWatch metric
  namespace           = "AWS/EC2"                       # Metric namespace
  period              = 300                             # Check every 5 minutes
  statistic           = "Average"                       # Take the average of CPU usage
  threshold           = 70                              # Alarm triggers at 70% CPU usage
  alarm_description   = "Alarm for high CPU usage"      # Description of the alarm
  dimensions = {
    InstanceId = aws_instance.example_instance.id       # Monitor this EC2 instance
  }
  alarm_actions = ["arn:aws:sns:us-east-1:123456789012:example-topic"] # Replace with SNS ARN
}


---

## **Intermediate**: Monitor EC2 Logs Using CloudWatch Log Group

hcl
# Define the AWS provider
provider "aws" {
  region = "us-east-1"
}

# IAM Role for EC2 instance to send logs to CloudWatch
resource "aws_iam_role" "ec2_log_role" {
  name = "ec2-cloudwatch-log-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action    = "sts:AssumeRole",
        Effect    = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

# Attach CloudWatch log policy to the IAM role
resource "aws_iam_role_policy_attachment" "cloudwatch_log_policy" {
  role       = aws_iam_role.ec2_log_role.name
  policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
}

# Create an instance profile for the role
resource "aws_iam_instance_profile" "ec2_instance_profile" {
  name = "ec2-instance-profile"
  role = aws_iam_role.ec2_log_role.name
}

# CloudWatch Log Group for EC2 logs
resource "aws_cloudwatch_log_group" "ec2_log_group" {
  name = "/ec2/example-instance-logs"  # Log group name
  retention_in_days = 14               # Retain logs for 14 days
}

# Launch an EC2 instance with CloudWatch Agent
resource "aws_instance" "ec2_instance" {
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with a valid AMI ID
  instance_type = "t2.micro"
  iam_instance_profile = aws_iam_instance_profile.ec2_instance_profile.name

  user_data = <<-EOF
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y amazon-cloudwatch-agent
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                -a fetch-config \
                -m ec2 \
                -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json \
                -s
              EOF

  tags = {
    Name = "CloudWatchLogInstance"
  }
}


---

## **Advanced**: Create a CloudWatch Dashboard for Multiple Metrics

hcl
# Define AWS provider
provider "aws" {
  region = "us-east-1"
}

# Create a CloudWatch Dashboard
resource "aws_cloudwatch_dashboard" "ec2_dashboard" {
  dashboard_name = "EC2-Monitoring-Dashboard"  # Name of the dashboard

  dashboard_body = jsonencode({
    widgets = [
      {
        type = "metric",
        x    = 0,
        y    = 0,
        width = 12,
        height = 6,
        properties = {
          metrics = [
            ["AWS/EC2", "CPUUtilization", "InstanceId", "i-0123456789abcdef0"],
            ["AWS/EC2", "NetworkIn", "InstanceId", "i-0123456789abcdef0"]
          ],
          view        = "timeSeries",
          stacked     = false,
          region      = "us-east-1",
          title       = "EC2 Instance Metrics"
        }
      }
    ]
  })
}


---
